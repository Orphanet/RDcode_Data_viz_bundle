# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ClassificationLevel(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, _date: datetime=None, orph_acode: int=None, classification_level: str=None):  # noqa: E501
        """ClassificationLevel - a model defined in Swagger

        :param _date: The _date of this ClassificationLevel.  # noqa: E501
        :type _date: datetime
        :param orph_acode: The orph_acode of this ClassificationLevel.  # noqa: E501
        :type orph_acode: int
        :param classification_level: The classification_level of this ClassificationLevel.  # noqa: E501
        :type classification_level: str
        """
        self.swagger_types = {
            '_date': datetime,
            'orph_acode': int,
            'classification_level': str
        }

        self.attribute_map = {
            '_date': 'Date',
            'orph_acode': 'ORPHAcode',
            'classification_level': 'ClassificationLevel'
        }
        self.__date = _date
        self._orph_acode = orph_acode
        self._classification_level = classification_level

    @classmethod
    def from_dict(cls, dikt) -> 'ClassificationLevel':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ClassificationLevel of this ClassificationLevel.  # noqa: E501
        :rtype: ClassificationLevel
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _date(self) -> datetime:
        """Gets the _date of this ClassificationLevel.


        :return: The _date of this ClassificationLevel.
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date: datetime):
        """Sets the _date of this ClassificationLevel.


        :param _date: The _date of this ClassificationLevel.
        :type _date: datetime
        """

        self.__date = _date

    @property
    def orph_acode(self) -> int:
        """Gets the orph_acode of this ClassificationLevel.


        :return: The orph_acode of this ClassificationLevel.
        :rtype: int
        """
        return self._orph_acode

    @orph_acode.setter
    def orph_acode(self, orph_acode: int):
        """Sets the orph_acode of this ClassificationLevel.


        :param orph_acode: The orph_acode of this ClassificationLevel.
        :type orph_acode: int
        """

        self._orph_acode = orph_acode

    @property
    def classification_level(self) -> str:
        """Gets the classification_level of this ClassificationLevel.


        :return: The classification_level of this ClassificationLevel.
        :rtype: str
        """
        return self._classification_level

    @classification_level.setter
    def classification_level(self, classification_level: str):
        """Sets the classification_level of this ClassificationLevel.


        :param classification_level: The classification_level of this ClassificationLevel.
        :type classification_level: str
        """
        allowed_values = ["Disorder", "Subtype of disorder", "Group of disorders"]  # noqa: E501
        if classification_level not in allowed_values:
            raise ValueError(
                "Invalid value for `classification_level` ({0}), must be one of {1}"
                .format(classification_level, allowed_values)
            )

        self._classification_level = classification_level
